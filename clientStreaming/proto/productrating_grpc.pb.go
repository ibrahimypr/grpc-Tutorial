// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: proto/productrating.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RatingServiceClient is the client API for RatingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatingServiceClient interface {
	RateProduct(ctx context.Context, opts ...grpc.CallOption) (RatingService_RateProductClient, error)
}

type ratingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRatingServiceClient(cc grpc.ClientConnInterface) RatingServiceClient {
	return &ratingServiceClient{cc}
}

func (c *ratingServiceClient) RateProduct(ctx context.Context, opts ...grpc.CallOption) (RatingService_RateProductClient, error) {
	stream, err := c.cc.NewStream(ctx, &RatingService_ServiceDesc.Streams[0], "/productrating.RatingService/RateProduct", opts...)
	if err != nil {
		return nil, err
	}
	x := &ratingServiceRateProductClient{stream}
	return x, nil
}

type RatingService_RateProductClient interface {
	Send(*ProductRating) error
	CloseAndRecv() (*AverageRating, error)
	grpc.ClientStream
}

type ratingServiceRateProductClient struct {
	grpc.ClientStream
}

func (x *ratingServiceRateProductClient) Send(m *ProductRating) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ratingServiceRateProductClient) CloseAndRecv() (*AverageRating, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AverageRating)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RatingServiceServer is the server API for RatingService service.
// All implementations must embed UnimplementedRatingServiceServer
// for forward compatibility
type RatingServiceServer interface {
	RateProduct(RatingService_RateProductServer) error
	mustEmbedUnimplementedRatingServiceServer()
}

// UnimplementedRatingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRatingServiceServer struct {
}

func (UnimplementedRatingServiceServer) RateProduct(RatingService_RateProductServer) error {
	return status.Errorf(codes.Unimplemented, "method RateProduct not implemented")
}
func (UnimplementedRatingServiceServer) mustEmbedUnimplementedRatingServiceServer() {}

// UnsafeRatingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatingServiceServer will
// result in compilation errors.
type UnsafeRatingServiceServer interface {
	mustEmbedUnimplementedRatingServiceServer()
}

func RegisterRatingServiceServer(s grpc.ServiceRegistrar, srv RatingServiceServer) {
	s.RegisterService(&RatingService_ServiceDesc, srv)
}

func _RatingService_RateProduct_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RatingServiceServer).RateProduct(&ratingServiceRateProductServer{stream})
}

type RatingService_RateProductServer interface {
	SendAndClose(*AverageRating) error
	Recv() (*ProductRating, error)
	grpc.ServerStream
}

type ratingServiceRateProductServer struct {
	grpc.ServerStream
}

func (x *ratingServiceRateProductServer) SendAndClose(m *AverageRating) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ratingServiceRateProductServer) Recv() (*ProductRating, error) {
	m := new(ProductRating)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RatingService_ServiceDesc is the grpc.ServiceDesc for RatingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RatingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "productrating.RatingService",
	HandlerType: (*RatingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RateProduct",
			Handler:       _RatingService_RateProduct_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/productrating.proto",
}
